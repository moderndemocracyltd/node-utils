{"version":3,"sources":["../../../../../packages/operations/src/notification_topics/delete_tenant.js"],"names":["notificationsDeleteTenant","env","tenant","includes","console","error","process","exit","bucket_errors","r","length","NOTIFICATIONS_DATA_BUCKET","S3_CLIENT","TOPICS_FILE_NAME","bucketExists","message","push","readFile","topicsContent","JSON","parse","statusCode","log","stringify","writeFile","result","err","Location","Bucket"],"mappings":"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","file":"delete_tenant.js","sourcesContent":["import {S3Filesystem} from '../services/s3/index';\r\nimport {REGIONS, ENVIRONMENTS} from '../constants'\r\n\r\nconst notificationsDeleteTenant = async (env, tenant) => {\r\n    if (!ENVIRONMENTS.includes(env)){\r\n        console.error(`The supplied environment (${env}) is not in the accept list of environments.`);\r\n        console.error(\"Accepted environments = \", ENVIRONMENTS);\r\n        process.exit(1)\r\n    }\r\n\r\n    let bucket_errors = [];\r\n\r\n    // Removes the new tenant to all currently used regions\r\n    for (let r = 0; r < REGIONS.length; r++){\r\n        try {\r\n            const NOTIFICATIONS_DATA_BUCKET = `notifications-topics-subscribers-${env}-${REGIONS[r]}`;\r\n            const S3_CLIENT = new S3Filesystem(NOTIFICATIONS_DATA_BUCKET);\r\n            const TOPICS_FILE_NAME = 'DecsTestNotificationTopics.json';\r\n\r\n            // Checks if bucket exists, if there is an error a message is added to an array for displaying at the end\r\n            const bucketExists = await S3_CLIENT.bucketExists();\r\n            if (!bucketExists) {\r\n                const message = `Bucket ${NOTIFICATIONS_DATA_BUCKET} doesn't exist.`;\r\n                console.error(message);\r\n                bucket_errors.push(message);\r\n                continue\r\n            }\r\n\r\n            // Gets the notifications details from an S3 bucket\r\n            let topicsContent = await S3_CLIENT.readFile(TOPICS_FILE_NAME);\r\n            if (typeof(topicsContent) === 'string'){\r\n                topicsContent = JSON.parse(topicsContent)\r\n            }\r\n            // Ensures the data was retrieved successfully\r\n            if ('statusCode' in topicsContent) {\r\n                if (topicsContent.statusCode === 404) {\r\n                    console.log(`The supplied file name (${TOPICS_FILE_NAME}) does not exist.`);\r\n                    console.log(\"This process will create a new file.\");\r\n                    topicsContent = {}\r\n                }\r\n                else if (topicsContent.statusCode > 400) {\r\n                    console.error(\"There was an error while trying to retrieve the file contents: \");\r\n                    console.error(topicsContent);\r\n                    process.exit(1)\r\n                }\r\n            }\r\n\r\n            // Does nothing if tenant doesn't exist\r\n            if (!tenant in topicsContent) {\r\n                console.log(`Tenant ${tenant} doesn't exist, done.`);\r\n            }\r\n            else {\r\n                console.log(`tenant ${tenant} found, removing tenant...`);\r\n                // Removes key and value for the tenant\r\n                delete topicsContent[tenant];\r\n\r\n                console.log(\"topicsContent = \", JSON.stringify(topicsContent, null, 2));\r\n                // Uploads the whole data object to a file in S3 and creates a new file if it doesn't already exist\r\n                const result = await S3_CLIENT.writeFile(TOPICS_FILE_NAME, JSON.stringify(topicsContent, null, 2));\r\n\r\n                if ('err' in result) {\r\n                    console.error(result.err);\r\n                    process.exit(1)\r\n                }\r\n                else {\r\n                    console.log('Update Successfully Completed:');\r\n                    console.log('Location = ', result.Location);\r\n                    console.log('Bucket = ', result.Bucket)\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error(\"An error occurred: \");\r\n            console.error(err);\r\n            process.exit(1)\r\n        }\r\n    }\r\n\r\n    if (bucket_errors.length > 0) {\r\n        console.error(\"There were errors while trying to access buckets: \");\r\n        console.error(bucket_errors);\r\n        process.exit(1)\r\n    }\r\n};\r\n\r\nexport default notificationsDeleteTenant;"]}