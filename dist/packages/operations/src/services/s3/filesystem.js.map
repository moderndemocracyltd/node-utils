{"version":3,"sources":["../../../../../../packages/operations/src/services/s3/filesystem.js"],"names":["S3Filesystem","bucket","client","S3","signatureVersion","path","getObject","Bucket","Key","promise","then","data","Body","toString","catch","err","statusCode","message","payload","upload","ContentType","headBucket","console","error","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEMA,Y;AAEF,0BAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAc,IAAI,iBAAIC,EAAR,CAAW,EAACC,kBAAkB,IAAnB,EAAX,CAAd;AACH;;;;;iHAEcC,I;;;;;;uCACE,KAAKH,MAAL,CAAYI,SAAZ,CAAsB,EAACC,QAAQ,KAAKN,MAAd,EAAsBO,KAAKH,IAA3B,EAAtB,EACRI,OADQ,GAERC,IAFQ,CAEH,UAACC,IAAD,EAAU;AACZ,2CAAOA,KAAKC,IAAL,CAAUC,QAAV,EAAP;AACH,iCAJQ,EAKRC,KALQ,CAKF,UAACC,GAAD,EAAS;AACZ,2CAAO,EAACC,YAAYD,IAAIC,UAAjB,EAA6BC,SAASF,IAAIE,OAA1C,EAAP;AACH,iCAPQ,C;;;;;;;;;;;;;;;;;;;;;;mHAWDZ,I,EAAMa,O;;;;;;uCACL,KAAKhB,MAAL,CAAYiB,MAAZ,CAAmB,EAACZ,QAAQ,KAAKN,MAAd,EAAsBO,KAAKH,IAA3B,EAAiCO,MAAMM,OAAvC,EAAgDE,aAAa,kBAA7D,EAAnB,EACRX,OADQ,GAERC,IAFQ,CAEH,UAACC,IAAD,EAAU;AACZ,2CAAOA,IAAP;AACH,iCAJQ,EAKRG,KALQ,CAKF,UAACC,GAAD,EAAS;AACZ,2CAAO,EAACA,KAAKA,GAAN,EAAP;AACH,iCAPQ,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAWA,KAAKb,MAAL,CAAYmB,UAAZ,CAAuB,EAACd,QAAQ,KAAKN,MAAd,EAAvB,EACRQ,OADQ,GAERC,IAFQ,CAEH,YAAM;AACR,2CAAO,IAAP;AACH,iCAJQ,EAKRI,KALQ,CAKF,UAACC,GAAD,EAAS;AACZ,wCAAIA,IAAIC,UAAJ,KAAmB,GAAvB,EAA4B;AACxB,+CAAO,KAAP;AACH,qCAFD,MAGK;AACDM,gDAAQC,KAAR,CAAc,qDAAd;AACAD,gDAAQC,KAAR,CAAcR,IAAIS,IAAlB;AACA,+CAAO,KAAP;AACH;AACJ,iCAdQ,C;;;;;;;;;;;;;;;;;;;;;;;kBAkBNxB,Y","file":"filesystem.js","sourcesContent":["import AWS from 'aws-sdk';\r\n\r\nclass S3Filesystem {\r\n\r\n    constructor(bucket) {\r\n        this.bucket = bucket;\r\n        this.client = new AWS.S3({signatureVersion: 'v4'});\r\n    }\r\n\r\n    async readFile(path) {\r\n        return await this.client.getObject({Bucket: this.bucket, Key: path})\r\n            .promise()\r\n            .then((data) => {\r\n                return data.Body.toString()\r\n            })\r\n            .catch((err) => {\r\n                return {statusCode: err.statusCode, message: err.message};\r\n            });\r\n\r\n    }\r\n\r\n    async writeFile(path, payload) {\r\n        return await this.client.upload({Bucket: this.bucket, Key: path, Body: payload, ContentType: 'application/json'})\r\n            .promise()\r\n            .then((data) => {\r\n                return data\r\n            })\r\n            .catch((err) => {\r\n                return {err: err}\r\n            });\r\n    }\r\n\r\n    async bucketExists() {\r\n        return await this.client.headBucket({Bucket: this.bucket})\r\n            .promise()\r\n            .then(() => {\r\n                return true\r\n            })\r\n            .catch((err) => {\r\n                if (err.statusCode === 404) {\r\n                    return false\r\n                }\r\n                else {\r\n                    console.error(\"An error occurred while checking if bucket exists: \");\r\n                    console.error(err.code);\r\n                    return false\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default S3Filesystem;"]}